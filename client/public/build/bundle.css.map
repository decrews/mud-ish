{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "ChatBox.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport io from 'socket.io-client';\n\timport Events from './Events';\n\timport UserList from './Components/UserList.svelte'\n\timport ChatBox from './Components/ChatBox.svelte'\n\n\tlet socket;\n\tlet messages = [];\n\tlet userList = [];\n\n\tlet name = '';\n\n\t// $: connectionStatus = !!socket ? 'Connected!' : 'Not Connected!';\n\t// $: connectionStyle = `color: ${!!socket ? 'green' : 'red'}`;\n\n\tfunction connect() {\n\t\tsocket = io();\n\t\tsocket.emit(Events.InitializeUser, { name });\n\n\t\tsocket.on(Events.ServerMessage, onServerMessage);\n\t\tsocket.on(Events.UserMessage, onUserMessage);\n\t\tsocket.on(Events.UserList, onUserList);\n\t}\n\n\tfunction onUserMessage(message) {\n\t\tconsole.warn('-- new user message --');\n\t\tconsole.log(message);\n\t\tif (message.id) {\n\t\t\t// get the name associated with the id of the user\n\t\t\tconst user = userList.find(user => user.id === message.id);\n\t\t\t// get fresh messages array\n\t\t\tconst newMessages = Array.from(messages);\n\t\t\t// add the user to the message object\n\t\t\tmessage.user = user;\n\t\t\t// add new message to array;\n\t\t\tnewMessages.push(message);\n\t\t\t// update messages object to refresh svelte component\n\t\t\tmessages = newMessages;\n\t\t}\n\t}\n\n\tfunction onServerMessage(message) {\n\t\tconsole.warn('-- new server message --');\n\t\tconsole.log(message);\n\n\t\t// get fresh messages array\n\t\tconst newMessages = Array.from(messages);\n\t\t// add new message to array;\n\t\tnewMessages.push(message);\n\t\t// update messages object to refresh svelte component\n\t\tmessages = newMessages;\n\t}\n\n\tfunction onUserList(newList) {\n\t\tconsole.warn('-- new userList --');\n\t\tconsole.log(newList);\n\t\tuserList = newList;\n\t}\n\n\tfunction sendMessage(message) {\n\t\tconst payload = { message };\n\t\tconsole.log('sending payload');\n\t\tconsole.log(payload)\n\t\tsocket.emit(Events.UserMessage, payload);\n\t}\n</script>\n\n<main>\n\t{#if !socket}\n\t\t<h1 class=\"dgreen\">Hello {name}!</h1>\n\t\t<button on:click={connect}>Connect</button>\n\t\t<input type=\"text\" bind:value={name}>\n\n\t\t{:else}\n\t\t<div class=\"content\">\n\t\t\t<UserList users={userList} />\n\t\t\t<ChatBox {messages} sendMessage={sendMessage} />\n\t\t</div>\n\t{/if}\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t.content {\n\t\tdisplay: flex;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>",
    "<script>\r\n    export let messages;\r\n    export let sendMessage;\r\n    export let message;\r\n    let input;\r\n    let button;\r\n\r\n    function onMessage(e) {\r\n        e.preventDefault();\r\n        sendMessage(message);\r\n        message = '';\r\n    }\r\n</script>\r\n\r\n<main>\r\n    <div class=\"message-box\">\r\n        {#each messages as message (message.id + message.time + message.text)}\r\n            {#if message.user}\r\n                <p>{message.user.username} - {message.text}</p>\r\n            {/if}\r\n            {#if message.id === 'server'} \r\n                <p class='server-message'>{message.text}</p>\r\n            {/if}\r\n        {/each}\r\n    </div>\r\n    <form on:submit={(e) => onMessage(e)}>\r\n        <input type=\"text\" bind:this={input} bind:value={message}>\r\n    </form>\r\n</main>\r\n\r\n<style>\r\n\tmain {\r\n        padding: 1em;\r\n        text-align: left;\r\n    }\r\n\r\n    p {\r\n        margin-top: 0;\r\n        margin-bottom: 0;\r\n        width: 100%;\r\n        background-color: aqua;\r\n    }\r\n    \r\n    .message-box {\r\n        display: flex;\r\n        min-width: 500px;\r\n        height: 300px;\r\n        text-align: left;\r\n        background-color: var(--default-terminal-bg);\r\n        padding: 1em;\r\n        overflow: scroll;\r\n        -ms-overflow-style: none;  /* IE and Edge */\r\n        scrollbar-width: none;  /* Firefox */\r\n        flex-direction: column;\r\n        justify-content: flex-end;\r\n    }\r\n\r\n    .message-box::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n\r\n    .server-message {\r\n        font-weight: bold;\r\n    }\r\n\r\n    @media (min-width: 640px) {\r\n        main {\r\n            max-width: none;\r\n        }\r\n    }\r\n</style>"
  ],
  "names": [],
  "mappings": "AAkFC,IAAI,cAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,EAAE,cAAC,CAAC,AACH,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACjB,CAAC,AAED,QAAQ,cAAC,CAAC,AACT,OAAO,CAAE,IAAI,AACd,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,cAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC;ACxED,IAAI,cAAC,CAAC,AACC,OAAO,CAAE,GAAG,CACZ,UAAU,CAAE,IAAI,AACpB,CAAC,AAED,CAAC,cAAC,CAAC,AACC,UAAU,CAAE,CAAC,CACb,aAAa,CAAE,CAAC,CAChB,KAAK,CAAE,IAAI,CACX,gBAAgB,CAAE,IAAI,AAC1B,CAAC,AAED,YAAY,cAAC,CAAC,AACV,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,IAAI,CAChB,gBAAgB,CAAE,IAAI,qBAAqB,CAAC,CAC5C,OAAO,CAAE,GAAG,CACZ,QAAQ,CAAE,MAAM,CAChB,kBAAkB,CAAE,IAAI,CACxB,eAAe,CAAE,IAAI,CACrB,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,QAAQ,AAC7B,CAAC,AAED,0BAAY,mBAAmB,AAAC,CAAC,AAC7B,OAAO,CAAE,IAAI,AACjB,CAAC,AAED,eAAe,cAAC,CAAC,AACb,WAAW,CAAE,IAAI,AACrB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACvB,IAAI,cAAC,CAAC,AACF,SAAS,CAAE,IAAI,AACnB,CAAC,AACL,CAAC"
}